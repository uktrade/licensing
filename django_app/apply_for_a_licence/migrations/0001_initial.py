# Generated by Django 4.2.13 on 2024-07-10 13:43

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("sessions", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Address",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("address_line_1", models.CharField(blank=True, max_length=200, null=True)),
                ("address_line_2", models.CharField(blank=True, max_length=200, null=True)),
                ("address_line_3", models.CharField(blank=True, max_length=200, null=True)),
                ("address_line_4", models.CharField(blank=True, max_length=200, null=True)),
                ("postcode", models.CharField(max_length=20)),
                ("country", django_countries.fields.CountryField(max_length=2)),
                ("town_or_city", models.CharField(max_length=250)),
                ("county", models.CharField(max_length=250)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
            ],
            options={
                "db_table": "address",
                "db_table_comment": "The address has a start and end date.  the constraint manages those. ",
            },
        ),
        migrations.CreateModel(
            name="Applicant",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("user_email_address", models.EmailField(blank=True, max_length=254, null=True)),
                ("full_name", models.CharField(max_length=255)),
                ("business", models.CharField(blank=True, max_length=300, null=True, verbose_name="Business you work for")),
                ("role", models.CharField(blank=True, max_length=255, null=True)),
                ("uk_national_flag", models.BooleanField()),
                ("dual_national_flag", models.BooleanField()),
            ],
            options={
                "db_table": "applicant",
                "db_table_comment": "This table stores data about the applicant and about the verification of emails. ",
            },
        ),
        migrations.CreateModel(
            name="ApplicationOrganisation",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("application_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("organisation_id", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("recipient_flag", models.BooleanField()),
                ("trader_flag", models.BooleanField()),
                (
                    "relationship",
                    models.CharField(
                        blank=True, db_comment="what is the relationship between the provider and the recipient?", null=True
                    ),
                ),
            ],
            options={
                "db_table": "application_organisation",
            },
        ),
        migrations.CreateModel(
            name="ApplicationRussianSanction",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "prohibition",
                    models.TextField(db_comment="how do your [services] fall under the definition of prohibited [legislation]?"),
                ),
            ],
            options={
                "db_table": "application_russian_sanction",
            },
        ),
        migrations.CreateModel(
            name="ApplicationType",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("short_label", models.CharField()),
                (
                    "who_do_you_want_the_licence_to_cover",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("business", "A business or several businesses"),
                            ("individual", "A named individual or several named individuals"),
                            ("myself", "Myself"),
                        ],
                        max_length=255,
                        null=True,
                    ),
                ),
                ("label", models.CharField()),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
            ],
            options={
                "db_table": "application_type",
                "db_table_comment": "This table is similar to the report_type in Rab. It helps with the first screen to support choice of ",
            },
        ),
        migrations.CreateModel(
            name="BaseApplication",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("creation_date", models.DateField()),
                ("type_id", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "unique_ref",
                    models.CharField(
                        db_comment="This reference may need to match a wider data standard as applied in SIELS. I.E. GB[TYPE OF LICENCE]/[YEAR]/XXXXXXX/[length]\n\nType of licence: i.e., SIEL, OEIL, F680. It needs to be defined.\nYear : 2024 ....\nXXXXXXX : 0000001 -  then increment from the start of the calendar year. \n\nlength; it is permanent (P) or temporary (T).  It is surmised it is T. \n"
                    ),
                ),
                ("uk_recipient_flag", models.BooleanField()),
                (
                    "business_registered_on_companies_house",
                    models.CharField(choices=[("yes", "Yes"), ("no", "No"), ("do_not_know", "I do not know")], max_length=11),
                ),
            ],
            options={
                "db_table": "base_application",
            },
        ),
        migrations.CreateModel(
            name="Document",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("application_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("ref", models.IntegerField()),
                ("creation_time", models.DateField()),
                ("path", models.CharField()),
            ],
            options={
                "db_table": "document",
                "db_table_comment": "this table is similar as report of breach.",
            },
        ),
        migrations.CreateModel(
            name="ExistingLicences",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("licences", models.TextField(blank=True, null=True)),
                ("held_existing_licence", models.CharField(choices=[("yes", "Yes"), ("no", "No")], max_length=11)),
            ],
            options={
                "db_table": "existing_licences",
                "db_table_comment": "Previous licences held by the applicant. The first interaction is a text box to capture more than one licence. ",
            },
        ),
        migrations.CreateModel(
            name="Ground",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("label", models.CharField()),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
            ],
            options={
                "db_table": "ground",
            },
        ),
        migrations.CreateModel(
            name="HistoricalAddress",
            fields=[
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("modified_at", models.DateTimeField(blank=True, editable=False)),
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ("address_line_1", models.CharField(blank=True, max_length=200, null=True)),
                ("address_line_2", models.CharField(blank=True, max_length=200, null=True)),
                ("address_line_3", models.CharField(blank=True, max_length=200, null=True)),
                ("address_line_4", models.CharField(blank=True, max_length=200, null=True)),
                ("postcode", models.CharField(max_length=20)),
                ("country", django_countries.fields.CountryField(max_length=2)),
                ("town_or_city", models.CharField(max_length=250)),
                ("county", models.CharField(max_length=250)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
            ],
            options={
                "verbose_name": "historical address",
                "verbose_name_plural": "historical addresss",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalApplicant",
            fields=[
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("modified_at", models.DateTimeField(blank=True, editable=False)),
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ("user_email_address", models.EmailField(blank=True, max_length=254, null=True)),
                ("full_name", models.CharField(max_length=255)),
                ("business", models.CharField(blank=True, max_length=300, null=True, verbose_name="Business you work for")),
                ("role", models.CharField(blank=True, max_length=255, null=True)),
                ("uk_national_flag", models.BooleanField()),
                ("dual_national_flag", models.BooleanField()),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
            ],
            options={
                "verbose_name": "historical applicant",
                "verbose_name_plural": "historical applicants",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalApplicationApplicant",
            fields=[
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("modified_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
            ],
            options={
                "verbose_name": "historical application applicant",
                "verbose_name_plural": "historical application applicants",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalApplicationOrganisation",
            fields=[
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("modified_at", models.DateTimeField(blank=True, editable=False)),
                ("application_id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ("organisation_id", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("recipient_flag", models.BooleanField()),
                ("trader_flag", models.BooleanField()),
                (
                    "relationship",
                    models.CharField(
                        blank=True, db_comment="what is the relationship between the provider and the recipient?", null=True
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
            ],
            options={
                "verbose_name": "historical application organisation",
                "verbose_name_plural": "historical application organisations",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalApplicationRussianSanction",
            fields=[
                ("id", models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID")),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("modified_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "prohibition",
                    models.TextField(db_comment="how do your [services] fall under the definition of prohibited [legislation]?"),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
            ],
            options={
                "verbose_name": "historical application russian sanction",
                "verbose_name_plural": "historical application russian sanctions",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalApplicationServices",
            fields=[
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("modified_at", models.DateTimeField(blank=True, editable=False)),
                ("direct_flag", models.BooleanField()),
                ("unknown_flag", models.BooleanField()),
                ("description_provision", models.TextField(blank=True, null=True)),
                ("purpose_of_provision", models.TextField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
            ],
            options={
                "verbose_name": "historical application services",
                "verbose_name_plural": "historical application servicess",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalApplicationStatus",
            fields=[
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("modified_at", models.DateTimeField(blank=True, editable=False)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
            ],
            options={
                "verbose_name": "historical application status",
                "verbose_name_plural": "historical application statuss",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalApplicationType",
            fields=[
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("modified_at", models.DateTimeField(blank=True, editable=False)),
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ("short_label", models.CharField()),
                (
                    "who_do_you_want_the_licence_to_cover",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("business", "A business or several businesses"),
                            ("individual", "A named individual or several named individuals"),
                            ("myself", "Myself"),
                        ],
                        max_length=255,
                        null=True,
                    ),
                ),
                ("label", models.CharField()),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
            ],
            options={
                "verbose_name": "historical application type",
                "verbose_name_plural": "historical application types",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalBaseApplication",
            fields=[
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("modified_at", models.DateTimeField(blank=True, editable=False)),
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ("creation_date", models.DateField()),
                ("type_id", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "unique_ref",
                    models.CharField(
                        db_comment="This reference may need to match a wider data standard as applied in SIELS. I.E. GB[TYPE OF LICENCE]/[YEAR]/XXXXXXX/[length]\n\nType of licence: i.e., SIEL, OEIL, F680. It needs to be defined.\nYear : 2024 ....\nXXXXXXX : 0000001 -  then increment from the start of the calendar year. \n\nlength; it is permanent (P) or temporary (T).  It is surmised it is T. \n"
                    ),
                ),
                ("uk_recipient_flag", models.BooleanField()),
                (
                    "business_registered_on_companies_house",
                    models.CharField(choices=[("yes", "Yes"), ("no", "No"), ("do_not_know", "I do not know")], max_length=11),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
            ],
            options={
                "verbose_name": "historical base application",
                "verbose_name_plural": "historical base applications",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalDocument",
            fields=[
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("modified_at", models.DateTimeField(blank=True, editable=False)),
                ("application_id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ("ref", models.IntegerField()),
                ("creation_time", models.DateField()),
                ("path", models.CharField()),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
            ],
            options={
                "verbose_name": "historical document",
                "verbose_name_plural": "historical documents",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalExistingLicences",
            fields=[
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("modified_at", models.DateTimeField(blank=True, editable=False)),
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ("licences", models.TextField(blank=True, null=True)),
                ("held_existing_licence", models.CharField(choices=[("yes", "Yes"), ("no", "No")], max_length=11)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
            ],
            options={
                "verbose_name": "historical existing licences",
                "verbose_name_plural": "historical existing licencess",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalGround",
            fields=[
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("modified_at", models.DateTimeField(blank=True, editable=False)),
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ("label", models.CharField()),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
            ],
            options={
                "verbose_name": "historical ground",
                "verbose_name_plural": "historical grounds",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalIndividual",
            fields=[
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("modified_at", models.DateTimeField(blank=True, editable=False)),
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ("first_name", models.TextField(max_length=255)),
                ("last_name", models.TextField(max_length=255)),
                (
                    "nationality_and_location",
                    models.CharField(
                        choices=[
                            ("uk_national_uk_location", "UK national located in the UK"),
                            ("uk_national_non_uk_location", "UK national located outside the UK"),
                            ("dual_national_uk_location", "Dual national (includes UK) located in the UK"),
                            ("dual_national_non_uk_location", "Dual national (includes UK) located outside the UK"),
                            ("non_uk_national_uk_location", "Non-UK national located in the UK"),
                        ]
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
            ],
            options={
                "verbose_name": "historical individual",
                "verbose_name_plural": "historical individuals",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalIndustry",
            fields=[
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("modified_at", models.DateTimeField(blank=True, editable=False)),
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ("label", models.CharField()),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
            ],
            options={
                "verbose_name": "historical industry",
                "verbose_name_plural": "historical industrys",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalIndustryRegime",
            fields=[
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("modified_at", models.DateTimeField(blank=True, editable=False)),
                ("regime_id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ("industry_id", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
            ],
            options={
                "verbose_name": "historical industry regime",
                "verbose_name_plural": "historical industry regimes",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalOrganisation",
            fields=[
                (
                    "address_ptr",
                    models.ForeignKey(
                        auto_created=True,
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        parent_link=True,
                        related_name="+",
                        to="apply_for_a_licence.address",
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("modified_at", models.DateTimeField(blank=True, editable=False)),
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ("address_line_1", models.CharField(blank=True, max_length=200, null=True)),
                ("address_line_2", models.CharField(blank=True, max_length=200, null=True)),
                ("address_line_3", models.CharField(blank=True, max_length=200, null=True)),
                ("address_line_4", models.CharField(blank=True, max_length=200, null=True)),
                ("postcode", models.CharField(max_length=20)),
                ("country", django_countries.fields.CountryField(max_length=2)),
                ("town_or_city", models.CharField(max_length=250)),
                ("county", models.CharField(max_length=250)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("name", models.CharField()),
                ("name_of_person", models.CharField(blank=True, null=True)),
                ("website", models.URLField(blank=True, null=True)),
                (
                    "do_you_know_the_registered_company_number",
                    models.CharField(choices=[("yes", "Yes"), ("no", "No")], max_length=3),
                ),
                ("registered_company_number", models.CharField(blank=True, max_length=15, null=True)),
                ("registered_office_address", models.CharField(blank=True, null=True)),
                ("uk_flag", models.BooleanField(db_comment="the company is located in the UK")),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                ("additional_contact_details", models.CharField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
            ],
            options={
                "verbose_name": "historical organisation",
                "verbose_name_plural": "historical organisations",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalRegime",
            fields=[
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("modified_at", models.DateTimeField(blank=True, editable=False)),
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ("short_name", models.CharField()),
                ("full_name", models.CharField()),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                ("shown_gui_flag", models.BooleanField(blank=True, null=True)),
                ("licences_guid_flag", models.BooleanField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
            ],
            options={
                "verbose_name": "historical regime",
                "verbose_name_plural": "historical regimes",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalServices",
            fields=[
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("modified_at", models.DateTimeField(blank=True, editable=False)),
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                (
                    "type_of_service",
                    models.CharField(
                        choices=[
                            ("professional_and_business", "Professional and business services (Russia)"),
                            ("energy_related", "Energy-related services (Russia)"),
                            (
                                "infrastructure_and_tourism_related",
                                "Infrastructure and tourism-related services to non-government controlled Ukrainian territories (Russia)",
                            ),
                            (
                                "interception_or_monitoring",
                                "Interception or monitoring services (Russia, Belarus, Iran, Myanmar, Syria and Venezuela)",
                            ),
                            ("internet", "Internet services (Russia and Belarus)"),
                            (
                                "mining_manufacturing_or_computer",
                                "Mining manufacturing or computer services (Democratic People's Republic of Korea",
                            ),
                            (
                                "ships_or_aircraft_related",
                                "Ships or aircraft-related services (Democratic People's Republic of Korea)",
                            ),
                        ]
                    ),
                ),
                ("professional_or_business_service", models.CharField()),
                ("service_activities", models.TextField()),
                ("label", models.CharField(blank=True, null=True)),
                ("cpc_group", models.CharField(blank=True, null=True)),
                ("cpc_class", models.CharField(blank=True, null=True)),
                ("cpc_subclass", models.CharField(blank=True, null=True)),
                ("sic_code", models.IntegerField(blank=True, null=True)),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                ("industry_id", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
            ],
            options={
                "verbose_name": "historical services",
                "verbose_name_plural": "historical servicess",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalStatus",
            fields=[
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("modified_at", models.DateTimeField(blank=True, editable=False)),
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ("status", models.CharField(null=True)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
            ],
            options={
                "verbose_name": "historical status",
                "verbose_name_plural": "historical statuss",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalUserEmailVerification",
            fields=[
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("modified_at", models.DateTimeField(blank=True, editable=False)),
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ("email_verification_code", models.CharField(max_length=6)),
                ("date_created", models.DateTimeField(blank=True, editable=False)),
                ("verified", models.BooleanField(default=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
            ],
            options={
                "verbose_name": "historical user email verification",
                "verbose_name_plural": "historical user email verifications",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="Individual",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("first_name", models.TextField(max_length=255)),
                ("last_name", models.TextField(max_length=255)),
                (
                    "nationality_and_location",
                    models.CharField(
                        choices=[
                            ("uk_national_uk_location", "UK national located in the UK"),
                            ("uk_national_non_uk_location", "UK national located outside the UK"),
                            ("dual_national_uk_location", "Dual national (includes UK) located in the UK"),
                            ("dual_national_non_uk_location", "Dual national (includes UK) located outside the UK"),
                            ("non_uk_national_uk_location", "Non-UK national located in the UK"),
                        ]
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Industry",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("label", models.CharField()),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
            ],
            options={
                "db_table": "industry",
                "db_table_comment": "This table is new. It is not yet in RaB.",
            },
        ),
        migrations.CreateModel(
            name="IndustryRegime",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("regime_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("industry_id", models.UUIDField(default=uuid.uuid4, editable=False)),
            ],
            options={
                "db_table": "industry_regime",
            },
        ),
        migrations.CreateModel(
            name="Regime",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("short_name", models.CharField()),
                ("full_name", models.CharField()),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                ("shown_gui_flag", models.BooleanField(blank=True, null=True)),
                ("licences_guid_flag", models.BooleanField(blank=True, null=True)),
            ],
            options={
                "db_table": "regime",
                "db_table_comment": "this table is similar as RaB. Licensing_gui_flag has been added. ",
            },
        ),
        migrations.CreateModel(
            name="Services",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                (
                    "type_of_service",
                    models.CharField(
                        choices=[
                            ("professional_and_business", "Professional and business services (Russia)"),
                            ("energy_related", "Energy-related services (Russia)"),
                            (
                                "infrastructure_and_tourism_related",
                                "Infrastructure and tourism-related services to non-government controlled Ukrainian territories (Russia)",
                            ),
                            (
                                "interception_or_monitoring",
                                "Interception or monitoring services (Russia, Belarus, Iran, Myanmar, Syria and Venezuela)",
                            ),
                            ("internet", "Internet services (Russia and Belarus)"),
                            (
                                "mining_manufacturing_or_computer",
                                "Mining manufacturing or computer services (Democratic People's Republic of Korea",
                            ),
                            (
                                "ships_or_aircraft_related",
                                "Ships or aircraft-related services (Democratic People's Republic of Korea)",
                            ),
                        ]
                    ),
                ),
                ("professional_or_business_service", models.CharField()),
                ("service_activities", models.TextField()),
                ("label", models.CharField(blank=True, null=True)),
                ("cpc_group", models.CharField(blank=True, null=True)),
                ("cpc_class", models.CharField(blank=True, null=True)),
                ("cpc_subclass", models.CharField(blank=True, null=True)),
                ("sic_code", models.IntegerField(blank=True, null=True)),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                ("industry_id", models.UUIDField(default=uuid.uuid4, editable=False)),
            ],
            options={
                "db_table": "services",
                "db_table_comment": "This table is not in RaB. It is part of professions.",
            },
        ),
        migrations.CreateModel(
            name="Status",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("status", models.CharField(null=True)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
            ],
            options={
                "db_table": "status",
            },
        ),
        migrations.CreateModel(
            name="ApplicationApplicant",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "applicant",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="apply_for_a_licence.applicant",
                    ),
                ),
            ],
            options={
                "db_table": "application_applicant",
            },
        ),
        migrations.CreateModel(
            name="ApplicationServices",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "application",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="apply_for_a_licence.baseapplication",
                    ),
                ),
                ("direct_flag", models.BooleanField()),
                ("unknown_flag", models.BooleanField()),
                ("description_provision", models.TextField(blank=True, null=True)),
                ("purpose_of_provision", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "application_services",
            },
        ),
        migrations.CreateModel(
            name="ApplicationStatus",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "application",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="apply_for_a_licence.baseapplication",
                    ),
                ),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
            ],
            options={
                "db_table": "application_status",
                "db_table_comment": "This table can be used to compute the number of days each application is in a certain status. ",
            },
        ),
        migrations.CreateModel(
            name="Organisation",
            fields=[
                (
                    "address_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="apply_for_a_licence.address",
                    ),
                ),
                ("name", models.CharField()),
                ("name_of_person", models.CharField(blank=True, null=True)),
                ("website", models.URLField(blank=True, null=True)),
                (
                    "do_you_know_the_registered_company_number",
                    models.CharField(choices=[("yes", "Yes"), ("no", "No")], max_length=3),
                ),
                ("registered_company_number", models.CharField(blank=True, max_length=15, null=True)),
                ("registered_office_address", models.CharField(blank=True, null=True)),
                ("uk_flag", models.BooleanField(db_comment="the company is located in the UK")),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                ("additional_contact_details", models.CharField(blank=True, null=True)),
            ],
            options={
                "db_table": "organisation",
                "db_table_comment": "This table has been inspired from LITE data model. ",
            },
            bases=("apply_for_a_licence.address",),
        ),
        migrations.CreateModel(
            name="UserEmailVerification",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("email_verification_code", models.CharField(max_length=6)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("verified", models.BooleanField(default=False)),
                ("user_session", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="sessions.session")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddConstraint(
            model_name="industryregime",
            constraint=models.UniqueConstraint(fields=("regime_id", "industry_id"), name="regime-id-industry-id"),
        ),
        migrations.AddField(
            model_name="historicaluseremailverification",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicaluseremailverification",
            name="user_session",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="sessions.session",
            ),
        ),
        migrations.AddField(
            model_name="historicalstatus",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicalservices",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicalregime",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicalorganisation",
            name="applicant",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="apply_for_a_licence.applicant",
            ),
        ),
        migrations.AddField(
            model_name="historicalorganisation",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicalindustryregime",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicalindustry",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicalindividual",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicalground",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicalexistinglicences",
            name="application",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="apply_for_a_licence.baseapplication",
            ),
        ),
        migrations.AddField(
            model_name="historicalexistinglicences",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicaldocument",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicalbaseapplication",
            name="ground",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="apply_for_a_licence.ground",
            ),
        ),
        migrations.AddField(
            model_name="historicalbaseapplication",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicalbaseapplication",
            name="regime",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="apply_for_a_licence.regime",
            ),
        ),
        migrations.AddField(
            model_name="historicalapplicationtype",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicalapplicationstatus",
            name="application",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="apply_for_a_licence.baseapplication",
            ),
        ),
        migrations.AddField(
            model_name="historicalapplicationstatus",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicalapplicationstatus",
            name="status",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="apply_for_a_licence.status",
            ),
        ),
        migrations.AddField(
            model_name="historicalapplicationservices",
            name="application",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="apply_for_a_licence.baseapplication",
            ),
        ),
        migrations.AddField(
            model_name="historicalapplicationservices",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicalapplicationservices",
            name="services",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="apply_for_a_licence.services",
            ),
        ),
        migrations.AddField(
            model_name="historicalapplicationrussiansanction",
            name="application",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="apply_for_a_licence.baseapplication",
            ),
        ),
        migrations.AddField(
            model_name="historicalapplicationrussiansanction",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicalapplicationorganisation",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicalapplicationapplicant",
            name="applicant",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="apply_for_a_licence.applicant",
            ),
        ),
        migrations.AddField(
            model_name="historicalapplicationapplicant",
            name="application",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="apply_for_a_licence.baseapplication",
            ),
        ),
        migrations.AddField(
            model_name="historicalapplicationapplicant",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicalapplicant",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicalapplicant",
            name="user_email_verification",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="apply_for_a_licence.useremailverification",
            ),
        ),
        migrations.AddField(
            model_name="historicaladdress",
            name="applicant",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="apply_for_a_licence.applicant",
            ),
        ),
        migrations.AddField(
            model_name="historicaladdress",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="existinglicences",
            name="application",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, to="apply_for_a_licence.baseapplication"
            ),
        ),
        migrations.AddConstraint(
            model_name="document",
            constraint=models.UniqueConstraint(
                fields=("application_id", "ref", "creation_time"), name="application-ref-creation-time"
            ),
        ),
        migrations.AddField(
            model_name="baseapplication",
            name="ground",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="apply_for_a_licence.ground"
            ),
        ),
        migrations.AddField(
            model_name="baseapplication",
            name="regime",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="apply_for_a_licence.regime"),
        ),
        migrations.AddField(
            model_name="applicationrussiansanction",
            name="application",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, to="apply_for_a_licence.baseapplication"
            ),
        ),
        migrations.AddConstraint(
            model_name="applicationorganisation",
            constraint=models.UniqueConstraint(
                fields=("application_id", "organisation_id", "start_date"), name="application-organisation-start-date"
            ),
        ),
        migrations.AddField(
            model_name="applicant",
            name="user_email_verification",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="apply_for_a_licence.useremailverification"
            ),
        ),
        migrations.AddField(
            model_name="address",
            name="applicant",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="apply_for_a_licence.applicant"
            ),
        ),
        migrations.AddConstraint(
            model_name="existinglicences",
            constraint=models.UniqueConstraint(fields=("id", "application"), name="application-id"),
        ),
        migrations.AddField(
            model_name="applicationstatus",
            name="status",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="apply_for_a_licence.status"),
        ),
        migrations.AddField(
            model_name="applicationservices",
            name="services",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="apply_for_a_licence.services"),
        ),
        migrations.AddField(
            model_name="applicationapplicant",
            name="application",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, to="apply_for_a_licence.baseapplication"
            ),
        ),
        migrations.AddConstraint(
            model_name="applicationstatus",
            constraint=models.UniqueConstraint(
                fields=("application", "status", "start_date"), name="application-status-start-date"
            ),
        ),
        migrations.AddConstraint(
            model_name="applicationservices",
            constraint=models.UniqueConstraint(fields=("application", "services"), name="application-services"),
        ),
        migrations.AddConstraint(
            model_name="applicationapplicant",
            constraint=models.UniqueConstraint(fields=("applicant", "application"), name="applicant-application"),
        ),
    ]
